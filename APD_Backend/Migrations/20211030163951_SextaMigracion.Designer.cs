// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace APD_Backend.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20211030163951_SextaMigracion")]
    partial class SextaMigracion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Models.ArticuloXPedido", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("idArticulo")
                        .HasColumnType("integer");

                    b.Property<int>("idPedido")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("idArticulo");

                    b.HasIndex("idPedido");

                    b.ToTable("ArticuloXPedido");
                });

            modelBuilder.Entity("Models.Articulos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("idProveedor")
                        .HasColumnType("integer");

                    b.Property<string>("nombre")
                        .HasColumnType("text");

                    b.Property<float>("precio")
                        .HasColumnType("real");

                    b.Property<int>("stock")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("idProveedor");

                    b.ToTable("Articulos");
                });

            modelBuilder.Entity("Models.Clientes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("cantidadPedidos")
                        .HasColumnType("text");

                    b.Property<int>("clasificaciones")
                        .HasColumnType("integer");

                    b.Property<string>("direccion")
                        .HasColumnType("text");

                    b.Property<int>("idZona")
                        .HasColumnType("integer");

                    b.Property<string>("mail")
                        .HasColumnType("text");

                    b.Property<string>("nombre")
                        .HasColumnType("text");

                    b.Property<string>("telefono")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("idZona");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Models.Facturas", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("idCliente")
                        .HasColumnType("integer");

                    b.Property<int>("idFormaDePago")
                        .HasColumnType("integer");

                    b.Property<int>("idPedido")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("idCliente");

                    b.HasIndex("idFormaDePago");

                    b.HasIndex("idPedido");

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("Models.FormasDePago", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("formaDePago")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("FormasDePago");
                });

            modelBuilder.Entity("Models.Pedidos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("estado")
                        .HasColumnType("text");

                    b.Property<int>("idCliente")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("idCliente");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("Models.Proveedores", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("contacto")
                        .HasColumnType("integer");

                    b.Property<string>("nombre")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("Models.Roles", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("nombre")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Models.Tarjetas", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("fechaVencimiento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("idCliente")
                        .HasColumnType("integer");

                    b.Property<int>("numero")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("idCliente");

                    b.ToTable("Tarjetas");
                });

            modelBuilder.Entity("Models.Usuarios", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("clave")
                        .HasColumnType("text");

                    b.Property<int>("idRol")
                        .HasColumnType("integer");

                    b.Property<string>("tokenSesion")
                        .HasColumnType("text");

                    b.Property<string>("usuario")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("idRol");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Models.Zonas", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("zona")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Zonas");
                });

            modelBuilder.Entity("Models.ArticuloXPedido", b =>
                {
                    b.HasOne("Models.Articulos", "articulos")
                        .WithMany()
                        .HasForeignKey("idArticulo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Pedidos", "pedidos")
                        .WithMany()
                        .HasForeignKey("idPedido")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("articulos");

                    b.Navigation("pedidos");
                });

            modelBuilder.Entity("Models.Articulos", b =>
                {
                    b.HasOne("Models.Proveedores", "proveedores")
                        .WithMany()
                        .HasForeignKey("idProveedor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("proveedores");
                });

            modelBuilder.Entity("Models.Clientes", b =>
                {
                    b.HasOne("Models.Roles", "Zonas")
                        .WithMany()
                        .HasForeignKey("idZona")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Zonas");
                });

            modelBuilder.Entity("Models.Facturas", b =>
                {
                    b.HasOne("Models.Clientes", "clientes")
                        .WithMany()
                        .HasForeignKey("idCliente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.FormasDePago", "formasdepago")
                        .WithMany()
                        .HasForeignKey("idFormaDePago")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Pedidos", "pedidos")
                        .WithMany()
                        .HasForeignKey("idPedido")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("clientes");

                    b.Navigation("formasdepago");

                    b.Navigation("pedidos");
                });

            modelBuilder.Entity("Models.Pedidos", b =>
                {
                    b.HasOne("Models.Roles", "Clientes")
                        .WithMany()
                        .HasForeignKey("idCliente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("Models.Tarjetas", b =>
                {
                    b.HasOne("Models.Clientes", "clientes")
                        .WithMany()
                        .HasForeignKey("idCliente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("clientes");
                });

            modelBuilder.Entity("Models.Usuarios", b =>
                {
                    b.HasOne("Models.Roles", "roles")
                        .WithMany()
                        .HasForeignKey("idRol")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("roles");
                });
#pragma warning restore 612, 618
        }
    }
}
